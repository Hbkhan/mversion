#!/usr/bin/env node

var argv = process.argv.slice(2)
  , chalk = require('chalk')
  , version = require('../version')
  , thisVersion = require('../package.json').version
  ;


var commitMessage = null
  , defaultMessage = "v%s"
  ;

// Check if get
if (argv.length === 0) {
  // is get

  version.get(function (err, data) {
    if (err) {
      console.error("Failed:", err.message);
      return;
    }

    for(file in data) {
      if (data[file]) {
        console.log('* ' + file + ': ' + data[file]);
      }
    }
  });
  return;
}

if (argv[0] === '-h' || argv[0] === '--help' || argv[0] === '?') {
  return usage();
}

if (argv[0] === '-v' || argv[0] === '--version') {
  console.log('mversion v' + thisVersion);
  return;
}

// Check for git:
if (argv.length > 1 && argv[1] === "-m") {
  if (argv[2] && argv[2] != "-n" && argv[2] != "--no-prefix") {
    commitMessage = argv[2];
  } else {
    commitMessage = defaultMessage;
  }
}

version.update(argv[0], commitMessage, isNoPrefix(), function (err, data) {
  if (err && !data) {
    console.error("Failed:", err.message);
    return;
  }

  console.log('New Version:', data.newVersion);
  console.log(data.message);

  if (err) {
    console.log("Error:", err.message);
  }
});

function usage () {
  console.log([
              chalk.bold(chalk.green("Usage:")) + chalk.yellow(" mversion [ <newversion> | major | minor | patch | prerelease ] [ -m <optional message> ] [ -n | --no-prefix ]")
              ,chalk.underline("(run in package dir) - (Also supports premajor, preminor and prepatch, see semver summary)")
              ,""
              ,"Update module version in either one or all of package.json,"
              ,"component.json, bower.json, manifest.json and *.jquery.json."
              ,""
              ,"Run without arguments to get current version."
              ,""
              ,chalk.bold(chalk.green("# Semver Summary"))
              ,"Given a version number " + chalk.yellow("MAJOR.MINOR.PATCH") + ", increment the:"
              ,"- " + chalk.yellow("MAJOR") + " version when you make incompatible API changes,,"
              ,"- " + chalk.yellow("MINOR") + " version when you add functionality in a backwards-compatible manner, and,"
              ,"- " + chalk.yellow("PATCH") + " version when you make backwards-compatible bug fixes.,"
              ,"Additional labels for pre-release and build metadata are available as extensions to the " + chalk.yellow("MAJOR.MINOR.PATCH") + " format.,"
              ,""
              ,chalk.bold(chalk.green("# Update version"))
              ,"Update version by defining new semver valid version "
              ,"or a release string (major, minor, patch, build)."
              ,"--"
              ,"Ex: \"mversion minor\""
              ,"Ex: \"mversion 1.0.1-beta\""
              ,"--"
              ,""
              ,chalk.bold(chalk.green("# Git"))
              ,"Use " + chalk.yellow("-m") + " to auto commit and tag. Apply optional message and "
              ,"use '" + chalk.magenta("%s") + "' as placeholder for the updated version. Default "
              ,"message is 'v" + chalk.magenta("%s") + "' where " + chalk.magenta("%s") + " is replaced with new version."
              ,""
              ,chalk.yellow("--no-prefix") + " (or " + chalk.yellow("-n") + " for short) is used when you want to make"
              ,"a tag without v as prefix. This does not change behaviour of"
              ,"the message, just the tag name."
              ,""
              ,"--"
              ,"Ex: \"mversion minor -m\""
              ,"Ex: \"mversion minor -m 'Bumped to v%s'\""
              ,"--"
              ,""
              ].join("\n"))
}

function isNoPrefix() {
  for(var i = 0, len = argv.length; i < len; i++) {
    if (argv[i] === '-n' || argv[i] === '--no-prefix') {
      return true;
    }
  }
  return false;
}