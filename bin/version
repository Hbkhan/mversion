#!/usr/bin/env node

var argv = process.argv.slice(2),
    chalk = require('chalk'),
    version = require('../version'),
    thisVersion = require('../package.json').version;

var parsedArguments = require('minimist')(argv, {
  'boolean': ['n']
});
var defaultMessage = "v%s";

if (argv.length === 0) {
  get();
} else {
  update();
}

function get() {
  version.get(function (err, data) {
    if (err) {
      console.error(chalk.red(err.message));
    }

    for(file in data) {
      if (data[file]) {
        console.log(chalk.green(file) + ': ' + chalk.yellow(data[file]));
      }
    }

    if (err) process.exit(1);
  });
}

function update () {
  var updateOptions = {
    version: parsedArguments._[0],
    noPrefix: !!parsedArguments.n || parsedArguments.prefix === false
  };

  if (isArgumentPassed('h', 'help', '?')) {
    usage();
    process.exit(0);
  }

  if (isArgumentPassed('v', 'version')) {
    console.log('mversion v' + thisVersion);
    process.exit(0);
  }

  // Check for git:
  if (isArgumentPassed('m')) {
    updateOptions.commitMessage =
      parsedArguments.m === true
        ? defaultMessage
        : parsedArguments.m;
  }
  version.update(updateOptions, function (err, data) {
    if (err && !data) {
      console.error("Failed:", err.message);
      process.exit(1);
    }

    console.log('New Version:', data.newVersion);
    console.log(data.message);

    if (err) {
      console.log("Error:", err.message);
      process.exit(1);
    }
  });
}

function usage () {
  console.log([
                chalk.bold(chalk.green("Usage:")) + chalk.yellow(" mversion [ <newversion> | major | minor | patch | prerelease ] [ -m <optional message> ] [ -n | --no-prefix ]"),
                chalk.underline("(run in package dir) - (Also supports premajor, preminor and prepatch, see semver summary)"),

                "",
                "Update module version in either one or all of package.json,",
                "component.json, bower.json, manifest.json and *.jquery.json.",

                "",
                "Run without arguments to get current version.",
                "",

                chalk.bold(chalk.green("# Semver Summary")),
                "Given a version number " + chalk.yellow("MAJOR.MINOR.PATCH") + ", increment the:",
                "- " + chalk.yellow("MAJOR") + " version when you make incompatible API changes,,",
                "- " + chalk.yellow("MINOR") + " version when you add functionality in a backwards-compatible manner, and,",
                "- " + chalk.yellow("PATCH") + " version when you make backwards-compatible bug fixes.,",
                "Additional labels for pre-release and build metadata are available as extensions to the " + chalk.yellow("MAJOR.MINOR.PATCH") + " format.,",
                "",

                chalk.bold(chalk.green("# Update version")),
                "Update version by defining new semver valid version ",
                "or a release string (major, minor, patch, build).",
                "--",
                "Ex: \"mversion minor\"",
                "Ex: \"mversion 1.0.1-beta\"",
                "--",
                "",

                chalk.bold(chalk.green("# Git")),
                "Use " + chalk.yellow("-m") + " to auto commit and tag. Apply optional message and ",
                "use '" + chalk.magenta("%s") + "' as placeholder for the updated version. Default ",
                "message is 'v" + chalk.magenta("%s") + "' where " + chalk.magenta("%s") + " is replaced with new version.",
                "",

                chalk.yellow("--no-prefix") + " (or " + chalk.yellow("-n") + " for short) is used when you want to make",
                "a tag without v as prefix. This does not change behaviour of",
                "the message, just the tag name.",
                "",
                "--",
                "Ex: \"mversion minor -m\"",
                "Ex: \"mversion minor -m 'Bumped to v%s'\"",
                "--",
                ""
              ].join("\n"))
}

function isArgumentPassed () {
  var args = Array.prototype.slice.apply(arguments);
  for(var i = 0, len = args.length; i < len; i++) {
    if (!!parsedArguments[args[i]]) {
      return true;
    }
  }
  return false;
}